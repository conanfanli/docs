call plug#begin('~/.vim/plugged')

" You can specify revision/branch/tag.
Plug 'Shougo/vimshell', { 'rev': '3787e5' }
Plug 'scrooloose/nerdtree'
Plug 'jonathanfilip/vim-lucius'
Plug 'kien/ctrlp.vim'

" Deprecated in favor of ale which is async
" Plug 'scrooloose/syntastic'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'mileszs/ack.vim'

Plug 'pangloss/vim-javascript'
" Deprecated in favor of YCM
" Plug 'ervandew/supertab'
Plug 'schickling/vim-bufonly'
Plug 'alvan/vim-closetag'
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'elzr/vim-json'
Plug 'mxw/vim-jsx'
Plug 'editorconfig/editorconfig-vim'
Plug 'jparise/vim-graphql'
Plug 'w0rp/ale'
Plug 'Valloric/YouCompleteMe', { 'do': './install.py --gocode-completer --tern-completer --clang-completer' }
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'
Plug 'fatih/vim-go'
Plug 'kshenoy/vim-signature'
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'
Plug 'alvan/vim-closetag'
Plug 'tmhedberg/SimpylFold'
Plug 'Konfekt/FastFold'



call plug#end()

filetype plugin indent on
syntax enable

 " Toggle nerd tree
 map <C-n> :NERDTreeToggle<CR>
 let NERDTreeIgnore = ['__pycache__', 'node_modules']

 " Auto reload vimrc
 autocmd! bufwritepost .vimrc source %

 autocmd BufRead,BufNewFile *.conf setf dosini

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
"if has('mouse')
"  set mouse=a
"endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
    command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
                \ | wincmd p | diffthis
endif

" Customized section
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd BufNewFile,BufRead *.tsx,*.jsx set filetype=typescript.jsx
autocmd BufNewFile,BufRead *.pyi set filetype=python
au BufNewFile,BufRead *.mako set filetype=html

set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

set number
set ignorecase
set smartcase
set background=dark

" Toggle paste mode
set pastetoggle=<F5>
" Disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
imap <C-h> <Left>
imap <C-j> <Down>
imap <C-k> <Up>
imap <C-l> <Right>

" Use shift-H and shift-L to change buffer
nmap H :bp<CR>
nmap L :bn<CR>
nmap <C-f> :Ack<Space>

map <Leader>a :ALEDetail<CR>
" Use fuzzy finder buffer mode to open buffer
map <Leader>d :CtrlP .<CR>
map <Leader>f :CtrlPBuffer<CR>
set wildignore+=*/coverage/*,*/build/*,*/node_modules/*,*/__pycache__/*,*.ttf,*.svg,*.pyc,*/build-debug/*,venv/*,*/dist/*,*/staticfiles/*
" map <Leader>d :FufFileWithCurrentBufferDir<CR>

" close buffer without closing the window
nmap <Leader>q :bp<bar>sp<bar>bn<bar>bd<CR>
imap <Leader>w <ESC>:w<CR>
nmap <Leader>w <ESC>:w<CR>
imap zz <ESC>

" set tags files
set tags=tags;


" pyflakes
let g:pyflakes_use_quickfix = 0


let g:ycm_python_binary_path = 'python'

map gd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>y :let g:ycm_auto_trigger=0<CR>                " turn off YCM
nnoremap <leader>Y :let g:ycm_auto_trigger=1<CR>                "turn on YCM

set foldlevel=1


let g:go_fmt_command = "goimports"

let g:ale_lint_on_text_changed = 'never'
" You can disable this option too
" " if you don't want linters to run on opening a file
let g:ale_lint_on_enter = 0
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'typescript': ['tsserver'],
\   'python': ['flake8', 'mypy'],
\   'go': ['go build'],
\}

let g:ale_fixers = {}
let g:ale_fixers['python'] = ['isort', 'black']
let g:ale_fixers['javascript'] = ['eslint']
let g:ale_fixers['typescript'] = ['prettier']
" let g:ale_fixers['javascript.jsx'] = ['prettier']
let g:ale_fixers['typescript.tsx'] = ['prettier']
let g:ale_javascript_prettier_use_local_config = 1
let g:ale_fix_on_save = 1

let g:ale_typescript_eslint_use_global = 0

" Supertab
imap <tab> <C-Space>
let g:SuperTabDefaultCompletionType = "<c-n>"
let g:SupertabDefaultCompletionType = "context"
let g:SuperTabClosePreviewOnPopupClose = 1
set completeopt=menuone,longest,preview

" This auto close preview window if you exit the insert mode
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

set backupdir=~/.vim/backups
set directory=~/.vim/swaps

set wildmode=longest:full,list
set t_Co=256

set relativenumber
set cursorcolumn
colorscheme lucius

" close all buffers but current
nmap <Leader>c :BufOnly<CR>


" Airline settings
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='bubblegum'
let g:airline_powerline_fonts = 1
set laststatus=2


au BufNewFile,BufRead *.styl set filetype=less
autocmd BufNewFile,BufRead *.tsx set filetype=typescript.tsx


" closetag filename extensions
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.ts,*jsx,*js"

" clip command to copy yanked text to a file served by ngxin
command! CP :w! /usr/share/nginx/html/clips/1.txt

" typescript
"let g:typescript_compiler_binary = './node_modules/.bin/tsc'
"let g:typescript_compiler_options = ''
autocmd FileType typescript :set makeprg=./node_modules/.bin/tsc
set backupcopy=yes

" JSX works for .js files
let g:jsx_ext_required = 0

" Automatically remove trailing whitespace
autocmd BufWritePre * %s/\s\+$//e

" FZF
set rtp+=~/.fzf

" Use ag instead of ack
" let g:ackprg = 'ag --nogroup --nocolor --column'
let g:ackprg = 'git grep -n'
set encoding=utf-8

" Snip Expansion
let g:UltiSnipsExpandTrigger="<c-l>"

" supress warning
silent! py3 pass

" Add > at current position without closing the current tag, default is ''
let g:closetag_close_shortcut = '<leader>>'
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.php,*.jsx,*.tsx"

