" Note: Skip initialization for vim-tiny or vim-small.
 if 0 | endif

 if has('vim_starting')
   if &compatible
     set nocompatible               " Be iMproved
   endif

   " Required:
   set runtimepath+=~/.vim/bundle/neobundle.vim/
 endif

 " Required:
 call neobundle#begin(expand('~/.vim/bundle/'))

 " Let NeoBundle manage NeoBundle
 " Required:
 NeoBundleFetch 'Shougo/neobundle.vim'

 " My Bundles here:
 " Refer to |:NeoBundle-examples|.
 " Note: You don't set neobundle setting in .gvimrc!
 NeoBundle 'scrooloose/nerdtree'
 NeoBundle 'jonathanfilip/vim-lucius'
 NeoBundle 'kien/ctrlp.vim'
 NeoBundle 'klen/python-mode'
 NeoBundle 'scrooloose/syntastic'
 NeoBundle 'vim-airline/vim-airline'
 NeoBundle 'vim-airline/vim-airline-themes'
 NeoBundle 'mileszs/ack.vim'
 NeoBundle 'digitaltoad/vim-jade'
 NeoBundle 'pangloss/vim-javascript'
 NeoBundle 'maksimr/vim-jsbeautify'
 NeoBundle 'ervandew/supertab'
 NeoBundle 'saltstack/salt-vim'
 NeoBundle 'schickling/vim-bufonly'
 NeoBundle 'leafgarland/typescript-vim'
 NeoBundle 'alvan/vim-closetag'
 NeoBundle 'elzr/vim-json'
 NeoBundle 'mxw/vim-jsx'

 NeoBundleLazy 'flowtype/vim-flow', {
             \ 'autoload': {'filetypes': 'javascript'},
             \}

 "NeoBundle 'jiangmiao/auto-pairs'

 call neobundle#end()



 " Toggle nerd tree
 map <C-n> :NERDTreeToggle<CR>
 let NERDTreeIgnore = ['__pycache__', 'node_modules']

 " Auto reload vimrc
 autocmd! bufwritepost .vimrc source %

 " Required:
 filetype plugin indent on

 " If there are uninstalled bundles found on startup,
 " this will conveniently prompt you to install them.
 NeoBundleCheck
" Turn filetype off to load pathogen
" filetype off
" call pathogen#runtime_append_all_bundles()
" call pathogen#helptags()

" filetype on
" An example for a vimrc file.
"
" Maintainer:	Bram Moolenaar <Bram@vim.org>
" Last change:	2008 Dec 17
"
" To use it, copy it to
"     for Unix and OS/2:  ~/.vimrc
"	      for Amiga:  s:.vimrc
"  for MS-DOS and Win32:  $VIM\_vimrc
"	    for OpenVMS:  sys$login:.vimrc

" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather than Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
"if has('mouse')
"  set mouse=a
"endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

" Customized section
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
au BufNewFile,BufRead *.mako set filetype=html

set expandtab
set tabstop=4
set softtabstop=4
set shiftwidth=4

set number
set ignorecase
set smartcase
set background=dark

" Disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>
imap <C-h> <Left>
imap <C-j> <Down>
imap <C-k> <Up>
imap <C-l> <Right>

" use PageUp/H and PageDown/L switch buffer
nmap <PageUp> :bp<CR>
nmap <PageDown> :bn<CR>

nmap H :bp<CR>
nmap L :bn<CR>

" Use fuzzy finder buffer mode to open buffer
nmap <C-S-F> :PyLintAuto<CR>
map <Leader>d :CtrlP .<CR>
map <Leader>f :CtrlPBuffer<CR>
set wildignore+=*/coverage/*,*/build/*,*/node_modules/*,*/__pycache__/*,*.ttf,*.svg,*.pyc,*/build-debug/*,venv/*
" map <Leader>d :FufFileWithCurrentBufferDir<CR>

" close buffer without closing the window
nmap <Leader>q :bp<bar>sp<bar>bn<bar>bd<CR>
imap <Leader>w <ESC>:w<CR>
nmap <Leader>w <ESC>:w<CR>
imap zz <ESC>

" Use ww instead of ESC
" imap ww <ESC>
" set tags files
set tags=tags;


" pyflakes
let g:pyflakes_use_quickfix = 0


" pymode settings
" filetype off
" call pathogen#infect()
" call pathogen#helptags()
" filetype plugin indent on
" syntax on

let g:pymode_rope_goto_definition_bind = '<F3>'
let g:pymode_rope_goto_definition_cmd = 'e'
let g:pymode_rope_complete_on_dot = 0
" Do not let pymode automatically fold
let g:pymode_folding = 1
set foldlevel=1

" Do not let pymode auto fix whitespaces
let g:pymode_utils_whitespaces = 0

let g:pymode_lint_write = 0

let g:pymode_lint_checkers = '[pyflakes,mccabe]'


" DO NOT Auto open cwindow if errors be finded
let g:pymode_lint_cwindow = 0

" Supertab
imap <tab> <C-Space>
let g:SuperTabDefaultCompletionType = "<c-n>"
let g:SupertabDefaultCompletionType = "context"
let g:SuperTabClosePreviewOnPopupClose = 1
set completeopt=menuone,longest,preview

" This auto close preview window if you exit the insert mode
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

set backupdir=~/.vim/backups
set directory=~/.vim/swaps

set wildmode=longest:full,list
let g:syntastic_python_checkers = ['flake8']
set t_Co=256

set relativenumber
set cursorcolumn
colorscheme lucius

" run unittest
nmap <Leader>t :!python3 manage.py test <cword>

" close all buffers but current
nmap <Leader>c :BufOnly<CR>


" Airline settings
let g:airline#extensions#tabline#enabled = 1
let g:airline_theme='papercolor'
set laststatus=2


au BufNewFile,BufRead *.styl set filetype=less

" closetag filename extensions
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.ts"

" clip command to copy yanked text to a file served by ngxin
command! CP :w! /usr/share/nginx/html/clips/1.txt

" typescript
"let g:typescript_compiler_binary = './node_modules/.bin/tsc'
"let g:typescript_compiler_options = ''
autocmd FileType typescript :set makeprg=./node_modules/.bin/tsc
set backupcopy=yes

let g:syntastic_typescript_checkers = ['tsc']
set backupcopy=yes
let g:syntastic_typescript_tsc_fname = ''

let g:syntastic_javascript_checkers = ['eslint']
let b:syntastic_javascript_eslint_exec = './node_modules/.bin/eslint'

" JSX works for .js files
let g:jsx_ext_required = 0

" For flow
let g:flow#autoclose = 1
let g:flow#flowpath = './node_modules/.bin/flow'
let g:flow#enable = 0
let g:javascript_plugin_flow = 1

" Automatically remove trailing whitespace
autocmd BufWritePre * %s/\s\+$//e

" Dsiabling rope autoimport for performance reasons
let g:pymode_rope_autoimport = 0
let g:pymode_rope_regenerate_on_write = 0

" FZF
set rtp+=~/.fzf

" Use ag instead of ack
let g:ackprg = 'ag --nogroup --nocolor --column'

